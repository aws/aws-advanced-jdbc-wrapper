name: Run MultiAZ Integration Tests

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  multiaz-integration-tests:
    name: 'Run MultiAZ integration tests'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dbEngine: [ "mysql-multi-az", "pg-multi-az" ]
        version: [ "default", "latest" ]
    steps:
      - name: 'Clone repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 50
      - name: 'Set up JDK 8'
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: 8
      - name: 'Configure AWS credentials'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: 'Set up temp AWS credentials'
        run: |
          creds=($(aws sts get-session-token \
            --duration-seconds 21600 \
            --query 'Credentials.[AccessKeyId, SecretAccessKey, SessionToken]' \
            --output text \
          | xargs));
          echo "::add-mask::${creds[0]}"
          echo "::add-mask::${creds[1]}"
          echo "::add-mask::${creds[2]}"
          echo "TEMP_AWS_ACCESS_KEY_ID=${creds[0]}" >> $GITHUB_ENV
          echo "TEMP_AWS_SECRET_ACCESS_KEY=${creds[1]}" >> $GITHUB_ENV
          echo "TEMP_AWS_SESSION_TOKEN=${creds[2]}" >> $GITHUB_ENV
      - name: Run integration tests
        run: |
          ./gradlew --no-parallel --no-daemon test-all-${{ matrix.dbEngine }}
        env:
          RDS_CLUSTER_DOMAIN: ${{ secrets.DB_CONN_SUFFIX }}
          RDS_DB_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_ACCESS_KEY_ID: ${{ env.TEMP_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.TEMP_AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ env.TEMP_AWS_SESSION_TOKEN }}
          AURORA_MYSQL_DB_ENGINE_VERSION: ${{ matrix.version }}
          AURORA_PG_ENGINE_VERSION: ${{ matrix.vresion }}
      - name: Mask data
        run: |
          ./gradlew --no-parallel --no-daemon maskJunitHtmlReport
      - name: Archive junit results for ${{ matrix.dbEngine }}
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-report-default-${{ matrix.dbEngine }}
          path: ./wrapper/build/test-results
          retention-days: 5
      - name: Archive html summary report for ${{ matrix.dbEngine }}
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: html-summary-report-${{ matrix.vresion }}-${{ matrix.dbEngine }}
          path: ./wrapper/build/report
          retention-days: 5
