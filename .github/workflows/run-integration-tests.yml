name: Run Integration Tests (OpenJDK)

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '*'
    paths-ignore:
      - '**/*.md'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  aurora-postgres-integration-tests:
    concurrency: IntegrationTests-Aurora-OpenJDK
    name: 'Run Aurora Postgres container integration tests'
    runs-on: ubuntu-latest
    steps:
      - name: 'Clone repository'
        uses: actions/checkout@v2
        with:
          fetch-depth: 50
      - name: 'Set up JDK 8'
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: 'Configure AWS credentials'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: 'Set up temp AWS credentials'
        run: |
          creds=($(aws sts get-session-token \
            --duration-seconds 21600 \
            --query 'Credentials.[AccessKeyId, SecretAccessKey, SessionToken]' \
            --output text \
          | xargs));
          echo "::add-mask::${creds[0]}"
          echo "::add-mask::${creds[1]}"
          echo "::add-mask::${creds[2]}"
          echo "TEMP_AWS_ACCESS_KEY_ID=${creds[0]}" >> $GITHUB_ENV
          echo "TEMP_AWS_SECRET_ACCESS_KEY=${creds[1]}" >> $GITHUB_ENV
          echo "TEMP_AWS_SESSION_TOKEN=${creds[2]}" >> $GITHUB_ENV
      - name: 'Run integration tests (OpenJDK)'
        run: |
          ./gradlew --no-parallel --no-daemon test-integration-aurora-postgres
        env:
          AURORA_POSTGRES_CLUSTER_IDENTIFIER: ${{ secrets.AURORA_POSTGRES_CLUSTER_IDENTIFIER }}-${{ github.run_id }}
          AURORA_POSTGRES_USERNAME: ${{ secrets.AURORA_POSTGRES_USERNAME }}
          AURORA_POSTGRES_PASSWORD: ${{ secrets.AURORA_POSTGRES_PASSWORD }}
          AURORA_POSTGRES_DB_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_ACCESS_KEY_ID: ${{ env.TEMP_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.TEMP_AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ env.TEMP_AWS_SESSION_TOKEN }}
      - name: 'Archive junit results (OpenJDK)'
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: 'junit-report-openjdk'
          path: ./wrapper/build/reports/tests/
          retention-days: 5

  standard-postgres-integration-tests:
    concurrency: IntegrationTests-Standard-OpenJDK
    name: 'Run Standard Postgres container integration tests'
    runs-on: ubuntu-latest
    steps:
      - name: 'Clone repository'
        uses: actions/checkout@v2
        with:
          fetch-depth: 50
      - name: 'Set up JDK 8'
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: 'Run integration tests (OpenJDK)'
        run: |
          ./gradlew --no-parallel --no-daemon test-integration-standard-postgres
        env:
          TEST_USERNAME: ${{ secrets.STANDARD_POSTGRES_USERNAME }}
          TEST_PASSWORD: ${{ secrets.STANDARD_POSTGRES_PASSWORD }}
      - name: 'Archive junit results (OpenJDK)'
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: 'junit-report-openjdk'
          path: ./wrapper/build/reports/tests/
          retention-days: 5