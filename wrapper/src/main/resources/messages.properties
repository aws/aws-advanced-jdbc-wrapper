#
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Aurora Host List Connection Plugin
AuroraHostListConnectionPlugin.providerAlreadySet=Another dynamic host list provider has already been set: {0}.

# Aurora Host List Provider
AuroraHostListProvider.clusterInstanceHostPatternRequired=The 'clusterInstanceHostPattern' configuration property is required when an IP address or custom domain is used to connect to a cluster that provides topology information. If you would instead like to connect without failover functionality, set the 'enableClusterAwareFailover' configuration property to false.
AuroraHostListProvider.clusterInstanceHostPatternNotSupportedForRDSProxy=An RDS Proxy url can't be used as the 'clusterInstanceHostPattern' configuration setting.
AuroraHostListProvider.invalidPattern=Invalid value for the 'clusterInstanceHostPattern' configuration setting - the host pattern must contain a '?' character as a placeholder for the DB instance identifiers of the instances in the cluster.
AuroraHostListProvider.invalidTopology=The topology query returned an invalid topology - no writer instance detected.
AuroraHostListProvider.suggestedClusterId=ClusterId ''{0}'' is suggested for url ''{1}''.
AuroraHostListProvider.parsedListEmpty=Can''t parse connection string: ''{0}''
AuroraHostListProvider.invalidQuery=Error obtaining host list. Provided database might not be an Aurora Db cluster

# AWS Secrets Manager Connection Plugin
AwsSecretsManagerConnectionPlugin.javaSdkNotInClasspath=Required dependency 'AWS Java SDK for AWS Secrets Manager' is not on the classpath.
AwsSecretsManagerConnectionPlugin.jacksonDatabindNotInClasspath=Required dependency 'Jackson Databind' is not on the classpath.
AwsSecretsManagerConnectionPlugin.failedToFetchDbCredentials=Was not able to either fetch or read the database credentials from AWS Secrets Manager. Ensure the correct secretId and region properties have been provided.
AwsSecretsManagerConnectionPlugin.missingRequiredConfigParameter=Configuration parameter ''{0}'' is required.
AwsSecretsManagerConnectionPlugin.unsupportedRegion=Unsupported AWS region ''{0}''. For a list of supported regions, please visit https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html.
AwsSecretsManagerConnectionPlugin.failedLogin=Login failed. SQLState=''{0}''
AwsSecretsManagerConnectionPlugin.unhandledException=Unhandled exception: ''{0}''

# AWS Wrapper Data Source
AwsWrapperDataSource.missingTarget=Target data source class name or JDBC url is required.
AwsWrapperDataSource.missingUrl=No JDBC URL was provided, or a JDBC URL couldn't be built from the provided information.
AwsWrapperDataSource.missingDriver=Can't find a suitable driver for ''{0}''

# Cluster Aware Reader Failover Handler
ClusterAwareReaderFailoverHandler.interruptedThread=Thread was interrupted.
ClusterAwareReaderFailoverHandler.attemptingReaderConnection=Trying to connect to reader: ''{0}''
ClusterAwareReaderFailoverHandler.successfulReaderConnection=Connected to reader: ''{0}''
ClusterAwareReaderFailoverHandler.failedReaderConnection=Failed to connect to reader: ''{0}''
ClusterAwareReaderFailoverHandler.invalidTopology=''{0}'' was called with an invalid (null or empty) topology.

# Cluster Aware Writer Failover Handler
ClusterAwareWriterFailoverHandler.interruptedThread=Thread was interrupted.
ClusterAwareWriterFailoverHandler.successfullyReconnectedToWriterInstance=Successfully re-connected to the current writer instance: ''{0}''
ClusterAwareWriterFailoverHandler.failedToConnectToWriterInstance=Failed to connect to the writer instance.
ClusterAwareWriterFailoverHandler.successfullyConnectedToNewWriterInstance=Successfully connected to the new writer instance: ''{0}''
ClusterAwareWriterFailoverHandler.successfulConnectionInvalidTopology={0} successfully established a connection but doesn't contain a valid topology.
ClusterAwareWriterFailoverHandler.taskAAttemptReconnectToWriterInstance=[TaskA] Attempting to re-connect to the current writer instance: ''{0}''
ClusterAwareWriterFailoverHandler.failoverCalledWithInvalidTopology=Failover was called with an invalid (null or empty) topology.
ClusterAwareWriterFailoverHandler.taskAFinished=[TaskA] Finished
ClusterAwareWriterFailoverHandler.taskBAttemptConnectionToNewWriterInstance=[TaskB] Attempting to connect to a new writer instance.
ClusterAwareWriterFailoverHandler.taskBFinished=[TaskB] Finished
ClusterAwareWriterFailoverHandler.taskBConnectedToReader=[TaskB] Connected to reader: ''{0}''
ClusterAwareWriterFailoverHandler.taskBFailedToConnectToAnyReader=[TaskB] Failed to connect to any reader.
ClusterAwareWriterFailoverHandler.taskBTopologyObtained=[TaskB] Topology obtained: {0}
ClusterAwareWriterFailoverHandler.taskBAttemptConnectionToNewWriter=[TaskB] Trying to connect to a new writer: ''{0}''
ClusterAwareWriterFailoverHandler.taskBEncounteredException=[TaskB] encountered an exception: {0}
ClusterAwareWriterFailoverHandler.taskAEncounteredException=[TaskA] encountered an exception: {0}
ClusterAwareWriterFailoverHandler.standaloneNode=[TaskB] Host {0} is not yet connected to a cluster. The cluster is still being reconfigured.
ClusterAwareWriterFailoverHandler.alreadyWriter=Current reader connection is actually a new writer connection.

# Connection String Host List Provider
ConnectionStringHostListProvider.parsedListEmpty=Can''t parse connection string: ''{0}''.

# Connection Plugin Manager
ConnectionPluginManager.configurationProfileNotFound=Configuration profile ''{0}'' not found.
ConnectionPluginManager.releaseResources=Releasing resources.
ConnectionPluginManager.unknownPluginCode=Unknown plugin code: ''{0}''.
ConnectionPluginManager.unableToLoadPlugin=Unable to load connection plugin factory: ''{0}''.
ConnectionPluginManager.methodInvokedAgainstOldConnection=The current method was invoked on an object using an old connection. If you are invoking a method on a Statement, please ensure the connection was not switched before execution. If you are invoking a method on a ResultSet, please ensure the connection was not switched before invocation.

# Connection Url Builder
ConnectionUrlBuilder.missingJdbcProtocol=Missing JDBC protocol and/or host name. Could not construct URL.
ConnectionUrlBuilder.failureEncodingConnectionUrl=Failed to encode connectionURL properties.

# Connection Wrapper
ConnectionWrapper.protocolNotFound=Url should contain a driver protocol. Protocol is not found in url: ''{0}''
ConnectionWrapper.unclosedConnectionInstantiated=Unclosed connection was instantiated at this point:
ConnectionWrapper.connectionNotOpen=Initial connection isn't open.
ConnectionWrapper.finalizingUnclosedConnection=Finalizing a connection that was never closed.

# Console Consumer
ConsoleConsumer.unexpectedOutputType=Unexpected outputType: ''{0}''.

# Data Cache Connection Plugin
DataCacheConnectionPlugin.queryResultsCached=[{0}] Query results will be cached: {1}

# Default Connection Plugin
DefaultConnectionPlugin.executingMethod=Executing method: ''{0}''

# Driver
Driver.nullUrl=Url is null.
Driver.alreadyRegistered=Driver is already registered. It can only be registered once.
Driver.missingDriver=Can't find a suitable driver for ''{0}''.
Driver.notRegistered=Driver is not registered (or it has not been registered using Driver.register() method).
Driver.urlParsingFailed=Url [{0}] parsing failed with error: [{1}]

# Execution Time Connection Plugin
ExecutionTimeConnectionPlugin.executionTime=Executed {0} in {1} ms.

# Failover Connection Plugin
Failover.transactionResolutionUnknownError=Transaction resolution unknown. Please re-configure session state if required and try restarting the transaction.
Failover.connectionChangedError=The active SQL connection has changed due to a connection failure. Please re-configure session state if required.
Failover.parameterValue={0}={1}
Failover.unableToConnectToWriter=Unable to establish SQL connection to the writer instance.
Failover.unableToConnectToReader=Unable to establish SQL connection to the reader instance.
Failover.detectedException=Detected an exception while executing a command: {0}
Failover.failoverDisabled=Cluster-aware failover is disabled.
Failover.failoverEnabled=Cluster-aware failover is enabled.
Failover.establishedConnection=Connected to: {0}
Failover.startWriterFailover=Starting writer failover procedure.
Failover.startReaderFailover=Starting reader failover procedure.
Failover.topologyObtained=Topology obtained: {0}
Failover.invalidNode=Node is no longer available in the topology: {0}
Failover.failedToUpdateCurrentHostspecAvailability=Failed to update current hostspec availability.
Failover.noOperationsAfterConnectionClosed=No operations allowed after connection closed.

# Host Monitoring Connection Plugin
HostMonitoringConnectionPlugin.activatedMonitoring=Executing method ''{0}'', monitoring is activated.
HostMonitoringConnectionPlugin.unavailableNode=Node ''{0}'' is unavailable.
HostMonitoringConnectionPlugin.failedToRetrieveHostPort=Could not retrieve Host:Port for connection.
HostMonitoringConnectionPlugin.unsupportedDriverProtocol=Driver protocol ''{0}'' is not supported.

# IAM Auth Connection Plugin
IamAuthConnectionPlugin.unsupportedHostname=Unsupported AWS hostname {0}. Amazon domain name in format *.AWS-Region.rds.amazonaws.com or *.rds.AWS-Region.amazonaws.com.cn is expected.
IamAuthConnectionPlugin.unsupportedRegion=Unsupported AWS region ''{0}''. For supported regions, please read https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html
IamAuthConnectionPlugin.useCachedIamToken=Use cached IAM token = ''{0}''
IamAuthConnectionPlugin.generatedNewIamToken=Generated new IAM token = ''{0}''
IamAuthConnectionPlugin.invalidPort=Port number: {0} is not valid. Port number should be greater than zero.
IamAuthConnectionPlugin.missingPort=Port is required.

# Log Query Connection Plugin
LogQueryConnectionPlugin.executingQuery=[{0}] Executing query: {1}

# Monitor Connection Context
MonitorConnectionContext.exceptionAbortingConnection=Exception during aborting connection: {0}
MonitorConnectionContext.hostDead=Host {0} is *dead*.
MonitorConnectionContext.hostNotResponding=Host {0} is not *responding* {1}.
MonitorConnectionContext.hostAlive=Host {0} is *alive*.

# Monitor Thread Container
MonitorThreadContainer.emptyNodeKeys=Provided node keys are empty.

# Monitor Impl
MonitorImpl.contextNullWarning=Parameter 'context' should not be null.

# Monitor Service Impl
MonitorServiceImpl.nullMonitorParam=Parameter monitor' should not be null.
MonitorServiceImpl.emptyAliasSet=Empty alias set passed for {0}. Set should not be empty.
MonitorServiceImpl.monitorNotFoundForContext=Can't find monitor for context passed into MonitorServiceImpl.

# Plugin Service Impl
PluginServiceImpl.hostListEmpty=Current host list is empty.
PluginServiceImpl.releaseResources=Releasing resources.
PluginServiceImpl.hostListException=Exception while getting a host list.
PluginServiceImpl.hostAliasNotFound=Can't find any host by the following aliases: {0}

# Property Utils
PropertyUtils.setMethodDoesNotExistOnTarget=Set method for property ''{0}'' does not exist on target ''{0}''.
PropertyUtils.failedToSetProperty=Failed to set property ''{0}'' on target ''{0}''.

# Read Write Splitting Plugin
ReadWriteSplittingPlugin.errorSwitchingToReader=An error occurred while trying to switch to a reader connection.
ReadWriteSplittingPlugin.errorSwitchingToWriter=An error occurred while trying to switch to a writer connection.
ReadWriteSplittingPlugin.closingInternalConnections=Closing all internal connections except for the current one.
ReadWriteSplittingPlugin.setReaderConnection=Reader connection set to ''{0}''
ReadWriteSplittingPlugin.setWriterConnection=Writer connection set to ''{0}''
ReadWriteSplittingPlugin.setReadOnlyFalseInTransaction=setReadOnly(false) was called on a read-only connection inside a transaction. Please complete the transaction before calling setReadOnly(false).
ReadWriteSplittingPlugin.fallbackToWriter=Failed to switch to a reader; the current writer will be used as a fallback: ''{0}''
ReadWriteSplittingPlugin.switchedFromWriterToReader=Switched from a writer to a reader host. New reader host: ''{0}''
ReadWriteSplittingPlugin.switchedFromReaderToWriter=Switched from a reader to a writer host. New writer host: ''{0}''
ReadWriteSplittingPlugin.settingCurrentConnection=Setting the current connection to ''{0}''
ReadWriteSplittingPlugin.noWriterFound=No writer was found in the current host list.
ReadWriteSplittingPlugin.noReadersFound=The plugin expected reader hosts in the host list, but none were found.
ReadWriteSplittingPlugin.emptyHostList=Host list is empty.
ReadWriteSplittingPlugin.exceptionWhileExecutingCommand=Detected an exception while executing a command: ''{0}''
ReadWriteSplittingPlugin.failoverExceptionWhileExecutingCommand=Detected a failover exception while executing a command: ''{0}''
ReadWriteSplittingPlugin.unsupportedDriverProtocol=Driver protocol ''{0}'' is not supported.
ReadWriteSplittingPlugin.errorUpdatingHostSpecRole=An error occurred while trying to update the initial host spec role.
ReadWriteSplittingPlugin.driverWillNotSwitchToNewReader=There is only one reader instance; the driver will not switch to a new reader.
ReadWriteSplittingPlugin.successfullyConnectedToReader=Successfully connected to a new reader host: ''{0}''
ReadWriteSplittingPlugin.failedToConnectToReader=Failed to connect to reader host: ''{0}''
ReadWriteSplittingPlugin.transactionBoundaryDetectedSwitchingToNewReader=Transaction boundary detected - switching to a new reader instance.
ReadWriteSplittingPlugin.executingAgainstOldConnection=Executing method against old connection: ''{0}''

# Wrapper Utils
WrapperUtils.noWrapperClassExists=No wrapper class exists for ''{0}''.
WrapperUtils.failedToInitializeClass=Can't initialize class ''{0}''.

# Aurora Stale DNS
AuroraStaleDnsPlugin.requireDynamicProvider=Dynamic host list provider is required.
AuroraStaleDnsHelper.clusterEndpointDns=Cluster endpoint resolves to {0}.
AuroraStaleDnsHelper.writerHostSpec=Writer host: {0}
AuroraStaleDnsHelper.writerInetAddress=Writer host address: {0}
AuroraStaleDnsHelper.staleDnsDetected=Stale DNS data detected. Opening a connection to ''{0}''.
AuroraStaleDnsHelper.reset=Reset stored writer host.

# Util
Utils.topology=Topology: \n{0}

